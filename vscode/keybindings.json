[
  {
    "key": "ctrl+t f",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "ctrl+. g",
    "command": "editor.action.goToDeclaration",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "f12",
    "command": "-editor.action.goToDeclaration",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "alt+s",
    "command": "workbench.view.search",
    "when": "!searchViewletVisible"
  },
  {
    "key": "ctrl+shift+f",
    "command": "-workbench.view.search",
    "when": "!searchViewletVisible"
  },
  {
    "key": "alt+g",
    "command": "workbench.view.scm"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.view.scm"
  },
  {
    "key": "ctrl+,",
    "command": "expand_region",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+k w",
    "command": "-workbench.action.closeEditorsInGroup"
  },
  {
    "key": "ctrl+i",
    "command": "editor.action.triggerSuggest",
    "when": "editorTextFocus"
  },
  {
    "key": "tab",
    "command": "-acceptSelectedSuggestion",
    "when": "editorTextFocus && suggestWidgetVisible"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+p",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  {
    "key": "ctrl+t space",
    "command": "workbench.action.showCommands"
  },
  {
    "key": "ctrl+t v",
    "command": "magit.status"
  },
  {
    "key": "ctrl+x ctrl+q",
    "command": "workbench.action.closeAllEditors",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+x ctrl+k",
    "command": "-workbench.action.closeAllEditors",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+x ctrl+k",
    "command": "workbench.action.closeActiveEditor",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+x k",
    "command": "-workbench.action.closeActiveEditor",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+i",
    "command": "magit.toggle-fold",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "ctrl+m",
    "command": "magit.visit-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "ctrl+t p",
    "command": "projectManager.listProjects"
  },
  {
    "key": "shift+alt+p",
    "command": "-projectManager.listProjects"
  },
  {
    "key": "ctrl+t ctrl+t",
    "command": "workbench.action.showAllEditorsByMostRecentlyUsed",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+t i",
    "command": "editor.action.reindentselectedlines"
  },
  {
    "key": "ctrl+x i",
    "command": "editor.action.reindentselectedlines"
  },
  {
    "key": "ctrl+j",
    "command": "maximizeterminal.openMaximizedTerminal",
    "when": "!activePanel && !config.maximizeterminal.useAlternativeKeybinding"
  },
  {
    "key": "ctrl+j",
    "command": "maximizeterminal.openMinimizedTerminal",
    "when": "config.maximizeterminal.useAlternativeKeybinding && !activePanel"
  },
  {
    "key": "ctrl+j",
    "command": "maximizeterminal.closeMaximizedTerminal",
    "when": "activePanel | terminalFocus"
  },
  {
    "key": "ctrl+t g",
    "command": "grep.git"
  },
  {
    "key": "ctrl+h",
    "command": "-editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "ctrl+shift+,",
    "command": "emacs-mcx.beginningOfBuffer",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "shift+alt+,",
    "command": "-emacs-mcx.beginningOfBuffer",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "ctrl+shift+,",
    "command": "emacs-mcx.beginningOfBuffer",
    "when": "config.emacs-mcx.useMetaPrefixMacCmd && editorTextFocus"
  },
  {
    "key": "shift+alt+,",
    "command": "-emacs-mcx.beginningOfBuffer",
    "when": "config.emacs-mcx.useMetaPrefixMacCmd && editorTextFocus"
  },
  {
    "key": "ctrl+shift+.",
    "command": "emacs-mcx.endOfBuffer",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "shift+alt+.",
    "command": "-emacs-mcx.endOfBuffer",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "ctrl+k",
    "command": "emacs-mcx.killLine",
    "when": "terminalFocus || editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k",
    "command": "-emacs-mcx.killLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+j",
    "command": "-magit.move-next-entity",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "ctrl+j",
    "command": "-emacs-mcx.newLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+x right",
    "command": "workbench.action.nextEditor",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+x right",
    "command": "-workbench.action.nextEditor"
  },
  {
    "key": "ctrl+x left",
    "command": "workbench.action.previousEditor",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+x left",
    "command": "-workbench.action.previousEditor"
  },
  {
    "key": "ctrl+shift+n",
    "command": "-workbench.action.newWindow"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.nextEditor",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+p",
    "command": "workbench.action.previousEditor",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.terminal.new",
    "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+shift+`",
    "command": "-workbench.action.terminal.new",
    "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+x ctrl+c",
    "command": "-workbench.action.closeWindow"
  }
]
